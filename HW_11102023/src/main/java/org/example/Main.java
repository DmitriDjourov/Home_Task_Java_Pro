package org.example;


public class Main {
		public static void main(String[] args) {
				//1.  * Дан список строк. Необходимо найти количество строк, которые содержат заданную подстроку.

				//	private static void m1() {
				//			List<String> list = Arrays.asList("Java", "JavaScript", "Python", "Ruby");
				Methods.m1();
//*************************************************************************************

//				/**
				//2.
//				 * Дан список целых чисел. Необходимо найти максимальный
//				 * элемент списка, который делится на заданное число без остатка.
//				 */
//				private static void m2() {
//						List<Integer> list = Arrays.asList(10, 15, 20, 25, 30);
				Methods.m2();
//*************************************************************************************
				//3.
//				/**
//				 * Дана коллекция объектов класса Person. Класс Person содержит поля name и age.
//				 * Необходимо найти средний возраст людей, чьи имена начинаются на заданную букву.
//				 */
//				private static void m3() {
//						List<Person> people = Arrays.asList(
//								new Person("John", 20),
//								new Person("Jane", 25),
//								new Person("Jack", 30),
//								new Person("James", 35),
//								new Person("Jill", 40)
//						);
				Methods.m3();
//*************************************************************************************
				// 4.
//				/**
//				 * Дана коллекция строк. Необходимо найти все уникальные слова, которые содержатся в
//				 * этой коллекции строк, и вернуть их в виде списка.
//				 */
//				private static void m4() {
//						List<String> lines = Arrays.asList(
//								"Java is a programming language.",
//								"Java is widely used in enterprise applications.",
//								"Python is gaining popularity as a data science tool.",
//								"Python is a versatile programming language."
//						);
				Methods.m4();
//*************************************************************************************
				//5.
//				/**
//				 * Подсчитать буквы в нижнем и верхнем регистре
//				 String ss = "KikJhYggfTgf";
				Methods.m5();
//				 *************************************************************************************
				// 6.
//				/**
//				 * Определите все символьные строки максимальной длины в заданном конечном потоке символьных строк. через Optional
//				 Stream<String> stream = Stream.of("we", "wee", "qwer", "oooo");
//				 Optional<Map.Entry<Integer, List<String>>> max =
				Methods.m6();
//				 *************************************************************************************
				// 7.
//				/**
//				 * Дан список сотрудников, у каждого из которых есть поле "salary".
//				 * Необходимо найти среднюю зарплату сотрудников, работающих на должности "developer"
//				 * в компаниях, которые находятся в городах, начинающихся на букву "M".
//				 */
				Methods.m7();
//         *************************************************************************************
//				8.
//				/**
//				 * У нас есть список списков numbers,
//				 * и мы хотим получить все четные числа из этих списков.
//				 * Мы используем flatMap, чтобы преобразовать каждый внутренний
//				 * список в поток чисел, а затем фильтруем только четные числа.
//				 * Результат: Even numbers: [2, 4, 6].
//				 */
//				List<List<Integer>> numbers = Arrays.asList(
//						Arrays.asList(1, 2),
//						Arrays.asList(3, 4),
//						Arrays.asList(5, 6)
//				);
				Methods.m8();
//*************************************************************************************
//		9.
//		/**
//		 * Есть два списка list1 и list2, и мы
//		 * хотим получить все возможные комбинации сумм чисел из обоих списков.
//		 * Мы используем flatMap, чтобы преобразовать каждый элемент из list1 в поток,
//		 * затем применяем map, чтобы создать поток сумм чисел из list1 и list2,
//		 * и наконец, собираем все значения в combinedList.
//		 * Результат: Combined list: [5, 6, 7, 6, 7, 8, 7, 8, 9].
//
//		List<Integer> list1 = Arrays.asList(1, 2, 3);
//		List<Integer> list2 = Arrays.asList(4, 5, 6);
				Methods.m9();
//		*************************************************************************************

		}
}